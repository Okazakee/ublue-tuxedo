name: Build and Push Aurora Latest Tuxedo Images

on:
  schedule:
    - cron: "0 2 */2 * *" # Every 2 days at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant:
          - variant: aurora-latest
            containerfile: containerfiles/Containerfile.aurora-latest
            base_image: ghcr.io/ublue-os/aurora:latest
            tag: latest
            image_name: okazakee/aurora-tuxedo
            description: "Aurora Latest with Tuxedo drivers and TCC"
          - variant: aurora-dx-latest
            containerfile: containerfiles/Containerfile.aurora-dx-latest
            base_image: ghcr.io/ublue-os/aurora-dx:latest
            tag: latest
            image_name: okazakee/aurora-tuxedo-dx
            description: "Aurora DX Latest with Tuxedo drivers and TCC"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.tag }},enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.containerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign with Cosign
        env:
          TUF_ROOT: ${{ secrets.TUF_ROOT }}
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | cosign sign --yes ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}
