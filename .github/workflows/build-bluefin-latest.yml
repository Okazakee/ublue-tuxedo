name: Build and Push Bluefin Latest Tuxedo Images

on:
  push:
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "*.md"
  pull_request:
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "*.md"
  schedule:
    - cron: "0 2 */2 * *" # Every 2 days at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io

jobs:
  check-base-images:
    runs-on: ubuntu-latest
    outputs:
      skip_all: ${{ steps.check.outputs.skip_all }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Check base image digests
        id: check
        run: |
          bash scripts/check-base-images.sh --images ghcr.io/ublue-os/bluefin:latest ghcr.io/ublue-os/bluefin-dx:latest

  build-and-test:
    needs: check-base-images
    if: needs.check-base-images.outputs.skip_all == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [bluefin-latest, bluefin-dx-latest]
        include:
          - variant: bluefin-latest
            containerfile: containerfiles/Containerfile.bluefin-latest
            base_image: ghcr.io/ublue-os/bluefin:latest
            tag: latest
            image_name: okazakee/bluefin-tuxedo
            description: "Bluefin Latest with Tuxedo drivers and TCC"
          - variant: bluefin-dx-latest
            containerfile: containerfiles/Containerfile.bluefin-dx-latest
            base_image: ghcr.io/ublue-os/bluefin-dx:latest
            tag: latest
            image_name: okazakee/bluefin-tuxedo-dx
            description: "Bluefin DX Latest with Tuxedo drivers and TCC"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract MOK Certificates from Secrets
        run: |
          mkdir -p overlay/usr/share/aurora-tuxedo/mok/
          echo "${{ secrets.MOK_PRIVATE_KEY }}" > overlay/usr/share/aurora-tuxedo/mok/MOK.key
          echo "${{ secrets.MOK_CERTIFICATE_PEM }}" > overlay/usr/share/aurora-tuxedo/mok/MOK.crt
          echo "${{ secrets.MOK_CERTIFICATE_DER }}" | base64 -d > overlay/usr/share/aurora-tuxedo/mok/MOK.der

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.tag }},enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.containerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign with Cosign
        env:
          TUF_ROOT: ${{ secrets.TUF_ROOT }}
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | cosign sign --yes ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}
