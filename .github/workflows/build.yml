name: Build and Push Aurora Tuxedo

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: write # Allow pushing commits
  packages: write # Allow pushing to GHCR

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: okazakee/aurora-tuxedo

jobs:
  check-aurora-updates:
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.check.outputs.skip_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Check if scheduled run
        id: is_scheduled
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "scheduled=true" >> "$GITHUB_OUTPUT"
          else
            echo "scheduled=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies
        if: steps.is_scheduled.outputs.scheduled == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Check Aurora digest
        id: check
        run: |
          if [ "${{ steps.is_scheduled.outputs.scheduled }}" = "true" ]; then
            ./scripts/check-aurora-digest.sh
          else
            echo "skip_build=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit digest file
        if: steps.is_scheduled.outputs.scheduled == 'true' && steps.check.outputs.skip_build == 'false' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .aurora-digest
          git diff --staged --quiet || git commit -m "Update Aurora digest [skip ci]"
          git push

  build-and-push:
    needs: check-aurora-updates
    if: needs.check-aurora-updates.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [stable, latest, dx]
        include:
          - variant: stable
            containerfile: Containerfile
            tag: stable
          - variant: latest
            containerfile: Containerfile.latest
            tag: latest
          - variant: dx
            containerfile: Containerfile.dx
            tag: dx

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.tag }},enable={{is_default_branch}}
            type=raw,value=${{ matrix.tag }}-{{sha}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.containerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  test-images:
    needs: [check-aurora-updates, build-and-push]
    if: needs.check-aurora-updates.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [stable, latest, dx]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Test image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }} \
            bash -c "
              set -e
              echo '=== Testing ${{ matrix.variant }} variant ==='
              
              echo 'Checking TCC package...'
              rpm -q tuxedo-control-center || { echo 'ERROR: TCC package not installed'; exit 1; }
              
              echo 'Checking tuxedo-drivers package...'
              rpm -q tuxedo-drivers || { echo 'ERROR: tuxedo-drivers package not installed'; exit 1; }
              
              echo 'Checking kernel modules...'
              KVER=\$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1)
              echo \"Kernel version: \${KVER}\"
              
              MODULE_COUNT=\$(find /lib/modules/\${KVER} -name 'tuxedo*.ko*' | wc -l)
              if [ \"\${MODULE_COUNT}\" -eq 0 ]; then
                echo 'ERROR: No tuxedo kernel modules found'
                echo 'Searching all kernel versions:'
                find /lib/modules -name 'tuxedo*.ko*' || echo 'No modules found anywhere'
                exit 1
              fi
              echo \"Found \${MODULE_COUNT} tuxedo module(s)\"
              find /lib/modules/\${KVER} -name 'tuxedo*.ko*'
              
              echo 'Checking setup script...'
              if [ ! -f /usr/bin/setup-secureboot ]; then
                echo 'ERROR: setup-secureboot script not found'
                exit 1
              fi
              if [ ! -x /usr/bin/setup-secureboot ]; then
                echo 'ERROR: setup-secureboot script not executable'
                exit 1
              fi
              
              echo 'Checking systemd-sleep hook...'
              if [ ! -f /usr/lib/systemd/system-sleep/tuxedo-keyboard ]; then
                echo 'ERROR: systemd-sleep hook not found'
                exit 1
              fi
              if [ ! -x /usr/lib/systemd/system-sleep/tuxedo-keyboard ]; then
                echo 'ERROR: systemd-sleep hook not executable'
                exit 1
              fi
              
              echo 'Checking modules-load.d config...'
              if [ ! -f /etc/modules-load.d/tuxedo.conf ]; then
                echo 'ERROR: modules-load.d config not found'
                exit 1
              fi
              grep -q 'tuxedo_keyboard' /etc/modules-load.d/tuxedo.conf || { echo 'ERROR: tuxedo_keyboard not in modules-load.d'; exit 1; }
              
              echo '=== All tests passed for ${{ matrix.variant }} ==='
            "
