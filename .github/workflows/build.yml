name: Build and Push Universal Blue Tuxedo

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: write # Allow pushing commits
  packages: write # Allow pushing to GHCR
  id-token: write # Required for cosign keyless signing

env:
  REGISTRY: ghcr.io

jobs:
  check-base-images:
    runs-on: ubuntu-latest
    outputs:
      variants_to_build: ${{ steps.check.outputs.variants_to_build }}
      skip_all: ${{ steps.check.outputs.skip_all }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Check base image digests and determine variants to build
        id: check
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # Scheduled run - check which base images changed
            ./scripts/check-base-images.sh
          else
            # Manual trigger or PR - build all variants
            echo "variants_to_build=[\"aurora-stable\",\"aurora-latest\",\"aurora-dx-stable\",\"aurora-dx-latest\",\"bluefin-stable\",\"bluefin-latest\",\"bluefin-dx-stable\",\"bluefin-dx-latest\",\"bazzite-stable\"]" >> "$GITHUB_OUTPUT"
            echo "skip_all=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit digest file
        if: github.event_name == 'schedule' && steps.check.outputs.skip_all == 'false' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .base-image-digests
          git diff --staged --quiet || git commit -m "Update base image digests [skip ci]"
          git push

  build-and-test:
    needs: check-base-images
    if: needs.check-base-images.outputs.skip_all == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: ${{ fromJson(needs.check-base-images.outputs.variants_to_build) }}
        include:
          # Aurora variants
          - variant: aurora-stable
            containerfile: Containerfile.aurora
            base_image: ghcr.io/ublue-os/aurora:stable
            tag: stable
            image_name: okazakee/aurora-tuxedo
            description: "Aurora Stable with Tuxedo drivers and TCC"
          - variant: aurora-latest
            containerfile: Containerfile.aurora-latest
            base_image: ghcr.io/ublue-os/aurora:latest
            tag: latest
            image_name: okazakee/aurora-tuxedo
            description: "Aurora Latest with Tuxedo drivers and TCC"
          - variant: aurora-dx-stable
            containerfile: Containerfile.aurora-dx-stable
            base_image: ghcr.io/ublue-os/aurora-dx:stable
            tag: stable
            image_name: okazakee/aurora-tuxedo-dx
            description: "Aurora DX Stable with Tuxedo drivers and TCC"
          - variant: aurora-dx-latest
            containerfile: Containerfile.aurora-dx-latest
            base_image: ghcr.io/ublue-os/aurora-dx:latest
            tag: latest
            image_name: okazakee/aurora-tuxedo-dx
            description: "Aurora DX Latest with Tuxedo drivers and TCC"
          # Bluefin variants
          - variant: bluefin-stable
            containerfile: Containerfile.bluefin
            base_image: ghcr.io/ublue-os/bluefin:stable
            tag: stable
            image_name: okazakee/bluefin-tuxedo
            description: "Bluefin Stable with Tuxedo drivers and TCC"
          - variant: bluefin-latest
            containerfile: Containerfile.bluefin-latest
            base_image: ghcr.io/ublue-os/bluefin:latest
            tag: latest
            image_name: okazakee/bluefin-tuxedo
            description: "Bluefin Latest with Tuxedo drivers and TCC"
          - variant: bluefin-dx-stable
            containerfile: Containerfile.bluefin-dx-stable
            base_image: ghcr.io/ublue-os/bluefin-dx:stable
            tag: stable
            image_name: okazakee/bluefin-tuxedo-dx
            description: "Bluefin DX Stable with Tuxedo drivers and TCC"
          - variant: bluefin-dx-latest
            containerfile: Containerfile.bluefin-dx-latest
            base_image: ghcr.io/ublue-os/bluefin-dx:latest
            tag: latest
            image_name: okazakee/bluefin-tuxedo-dx
            description: "Bluefin DX Latest with Tuxedo drivers and TCC"
          # Bazzite variant
          - variant: bazzite-stable
            containerfile: Containerfile.bazzite
            base_image: ghcr.io/ublue-os/bazzite:stable
            tag: stable
            image_name: okazakee/bazzite-tuxedo
            description: "Bazzite Stable with Tuxedo drivers and TCC"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_name }}

      - name: Build image and push temp tag (non-PR)
        if: github.event_name != 'pull_request'
        id: build_push_temp
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.containerfile }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}-ci-${{ env.SHORT_SHA }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Set test image (non-PR)
        if: github.event_name != 'pull_request'
        run: echo "TEST_IMAGE=${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}-ci-${{ env.SHORT_SHA }}" >> $GITHUB_ENV

      - name: Build image local (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.containerfile }}
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Set test image (PR)
        if: github.event_name == 'pull_request'
        run: echo "TEST_IMAGE=${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}" >> $GITHUB_ENV

      - name: Test built image
        shell: bash
        run: |
          echo "Testing image: $TEST_IMAGE"
          docker run --rm -i "$TEST_IMAGE" bash -e -o pipefail <<'EOF'
          set -x
          echo "=== Testing ${{ matrix.variant }} variant ==="
          echo "Checking TCC package..."
          rpm -q tuxedo-control-center || { echo "ERROR: TCC package not installed"; exit 1; }
          echo "Checking tuxedo-drivers package..."
          rpm -q tuxedo-drivers || { echo "ERROR: tuxedo-drivers package not installed"; exit 1; }
          echo "Checking kernel modules..."
          KVER=$(rpm -q kernel --qf "%{VERSION}-%{RELEASE}.%{ARCH}\n" | tail -1)
          echo "Kernel version: ${KVER}"
          MODULE_COUNT=$(find /lib/modules/${KVER} -name "tuxedo*.ko*" | wc -l)
          if [ "${MODULE_COUNT}" -eq 0 ]; then
            echo "ERROR: No tuxedo kernel modules found"
            echo "Searching all kernel versions:"
            find /lib/modules -name "tuxedo*.ko*" || echo "No modules found anywhere"
            exit 1
          fi
          echo "Found ${MODULE_COUNT} tuxedo module(s)"
          find /lib/modules/${KVER} -name "tuxedo*.ko*"
          echo "Checking setup script..."
          [ -f /usr/bin/setup-secureboot ] && [ -x /usr/bin/setup-secureboot ] || { echo "ERROR: setup-secureboot missing or not executable"; exit 1; }
          echo "Checking systemd-sleep hook..."
          [ -x /usr/lib/systemd/system-sleep/tuxedo-keyboard ] || { echo "ERROR: systemd-sleep hook missing or not executable"; exit 1; }
          echo "Checking modules-load.d config..."
          [ -f /etc/modules-load.d/tuxedo.conf ] && grep -q tuxedo_keyboard /etc/modules-load.d/tuxedo.conf || { echo "ERROR: modules-load.d config missing"; exit 1; }
          echo "=== All tests passed ==="
          EOF

      - name: Promote image tags (main/master only)
        if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        run: |
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }} \
            -t ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}-${{ env.SHORT_SHA }} \
            ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}-ci-${{ env.SHORT_SHA }}

      - name: Sign container images
        if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign promoted images with cosign
        if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
        run: |
          cosign sign --yes --recursive \
            ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}
          cosign sign --yes --recursive \
            ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ matrix.tag }}-${{ env.SHORT_SHA }}
