name: Build and Push Aurora Tuxedo

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write # Allow pushing commits
  packages: write # Allow pushing to GHCR

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/aurora-tuxedo

jobs:
  check-aurora-updates:
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.check.outputs.skip_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Check Aurora digest
        id: check
        run: |
          ./scripts/check-aurora-digest.sh

  build-and-push:
    needs: check-aurora-updates
    if: needs.check-aurora-updates.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant: [stable, latest, dx]
        include:
          - variant: stable
            containerfile: Containerfile
            tag: stable
          - variant: latest
            containerfile: Containerfile.latest
            tag: latest
          - variant: dx
            containerfile: Containerfile.dx
            tag: dx

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.tag }},enable={{is_default_branch}}
            type=raw,value=${{ matrix.tag }}-{{sha}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.containerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Update digest file
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.variant == 'stable'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .aurora-digest
          git diff --staged --quiet || git commit -m "Update Aurora digest"
          git push

  test-images:
    needs: [check-aurora-updates, build-and-push]
    if: needs.check-aurora-updates.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [stable, latest, dx]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Test image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }} \
            bash -c "
              echo 'Testing ${{ matrix.variant }} variant...'
              echo 'Testing Tuxedo packages...'
              rpm -qa | grep -E '(tuxedo|dkms)' || echo 'No Tuxedo packages found'
              echo 'Testing modules...'
              ls -la /lib/modules/*/updates/ | grep tuxedo || echo 'No Tuxedo modules found'
              echo 'Testing scripts...'
              ls -la /usr/bin/setup-secureboot || echo 'Setup script not found'
              echo '${{ matrix.variant }} variant test completed'
            "
