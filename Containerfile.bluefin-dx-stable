# syntax=docker/dockerfile:1.4
FROM ghcr.io/ublue-os/bluefin-dx:stable
ENV LANG=C.UTF-8
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Add TUXEDO official repo and setup GPG key
RUN FEDORA_VER=$(rpm -E '%{fedora}') && \
    printf '[tuxedo]\nname=TUXEDO\nbaseurl=https://rpm.tuxedocomputers.com/fedora/%s/x86_64/base\nenabled=1\ngpgcheck=1\ngpgkey=https://rpm.tuxedocomputers.com/fedora/%s/0x54840598.pub.asc\n' \
    "${FEDORA_VER}" "${FEDORA_VER}" > /etc/yum.repos.d/tuxedo.repo && \
    curl -fsSL "https://rpm.tuxedocomputers.com/fedora/${FEDORA_VER}/0x54840598.pub.asc" -o /etc/pki/rpm-gpg/0x54840598.pub.asc && \
    rpm --import /etc/pki/rpm-gpg/0x54840598.pub.asc

# Install TUXEDO Control Center (tuxedo-drivers installed automatically as dependency)
# Install drivers normally so DKMS builds modules during the build
RUN dnf -y upgrade --setopt=install_weak_deps=False && \
    dnf -y install tuxedo-drivers && \
    dnf -y clean all

# Build DKMS modules for the installed kernel inside the image
RUN set -eux; \
    KVER=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1); \
    echo "Building DKMS modules for ${KVER}"; \
    dkms autoinstall -k "${KVER}" || true; \
    depmod -a "${KVER}" || true

# syntax=docker/dockerfile:1.4
FROM ghcr.io/ublue-os/aurora:stable
ENV LANG=C.UTF-8
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Add TUXEDO official repo and setup GPG key
RUN FEDORA_VER=$(rpm -E '%{fedora}') && \
    printf '[tuxedo]\nname=TUXEDO\nbaseurl=https://rpm.tuxedocomputers.com/fedora/%s/x86_64/base\nenabled=1\ngpgcheck=1\ngpgkey=https://rpm.tuxedocomputers.com/fedora/%s/0x54840598.pub.asc\n' \
    "${FEDORA_VER}" "${FEDORA_VER}" > /etc/yum.repos.d/tuxedo.repo && \
    curl -fsSL "https://rpm.tuxedocomputers.com/fedora/${FEDORA_VER}/0x54840598.pub.asc" -o /etc/pki/rpm-gpg/0x54840598.pub.asc && \
    rpm --import /etc/pki/rpm-gpg/0x54840598.pub.asc

# Install TUXEDO Control Center (tuxedo-drivers installed automatically as dependency)
# Install drivers normally so DKMS builds modules during the build
RUN dnf -y upgrade --setopt=install_weak_deps=False && \
    dnf -y install tuxedo-drivers && \
    dnf -y clean all

# Build DKMS modules for the installed kernel inside the image
RUN set -eux; \
    KVER=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1); \
    echo "Building DKMS modules for ${KVER}"; \
    dkms autoinstall -k "${KVER}" || true; \
    depmod -a "${KVER}" || true

# Install TCC - move to /usr/lib for ostree compatibility
RUN set -eux; \
    # Pre-create /opt as regular directory (Aurora might have it as symlink)
    if [ -L /opt ]; then \
        echo "/opt is a symlink, removing it"; \
        rm /opt; \
        mkdir -p /opt; \
    elif [ ! -d /opt ]; then \
        mkdir -p /opt; \
    fi; \
    # Install TCC to temporary location (check logs if it fails)
    echo "Installing tuxedo-control-center..."; \
    dnf -y install tuxedo-control-center || { \
        echo "ERROR: Failed to install tuxedo-control-center"; \
        echo "Checking repository:"; \
        dnf repolist -v | grep -i tuxedo || true; \
        echo "Checking if package exists:"; \
        dnf list tuxedo-control-center || true; \
        exit 1; \
    }; \
    dnf -y clean all; \
    # Verify TCC was installed
    if [ ! -d /opt/tuxedo-control-center ]; then \
        echo "ERROR: TCC not installed to /opt/tuxedo-control-center"; \
        ls -la /opt/ || true; \
        rpm -ql tuxedo-control-center || true; \
        exit 1; \
    fi; \
    # Move from /opt to /usr/lib (ostree-compatible location)
    mkdir -p /usr/lib/tuxedo-control-center; \
    cp -a /opt/tuxedo-control-center/. /usr/lib/tuxedo-control-center/; \
    rm -rf /opt/tuxedo-control-center; \
    echo "Moved TCC to /usr/lib/tuxedo-control-center"; \
    # Create symlink from /var/opt back to /usr/lib for compatibility
    mkdir -p /var/opt; \
    ln -sf /usr/lib/tuxedo-control-center /var/opt/tuxedo-control-center; \
    # Verify
    ls -la /usr/lib/tuxedo-control-center/ | head -20; \
    # Update desktop file
    if [ -f /usr/share/applications/tuxedo-control-center.desktop ]; then \
        sed -i 's|/opt/tuxedo-control-center|/usr/lib/tuxedo-control-center|g' /usr/share/applications/tuxedo-control-center.desktop; \
        echo "Updated desktop file"; \
        cat /usr/share/applications/tuxedo-control-center.desktop; \
    fi; \
    # Create CLI wrapper using tee (FOSS best practice for Dockerfiles)
    tee /usr/bin/tuxedo-control-center > /dev/null <<'EOF'
#!/bin/bash
exec /usr/lib/tuxedo-control-center/tuxedo-control-center "$@"
EOF
    chmod +x /usr/bin/tuxedo-control-center; \
    echo "âœ… TCC installed to /usr/lib/tuxedo-control-center"

# Verify tuxedo-drivers installation
RUN set -eux; \
    KVER=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1); \
    echo "Checking modules for kernel: ${KVER}"; \
    # List installed tuxedo files
    rpm -ql tuxedo-drivers || echo "tuxedo-drivers package contents not found"; \
    # Check if modules are in standard location
    find /lib/modules -name "tuxedo*.ko*" || echo "No tuxedo modules found"; \
    # Update module dependencies
    depmod -a ${KVER} || true

# Ensure modules auto-load on boot
RUN mkdir -p /etc/modules-load.d && echo 'tuxedo_keyboard' > /etc/modules-load.d/tuxedo.conf

# Copy overlay files
COPY overlay/ /

# Copy setup script
COPY scripts/setup-secureboot.sh /usr/bin/setup-secureboot
RUN chmod +x /usr/bin/setup-secureboot

# Resume hook to re-init keyboard on resume (fixes backlight reinit)
# File is already copied from overlay with correct permissions

# Cleanup
RUN rm -rf /var/cache/dnf/* /var/tmp/*

LABEL org.opencontainers.image.title="aurora-tuxedo"
LABEL org.opencontainers.image.description="Aurora with Tuxedo drivers and TCC for InfinityBook laptops"
LABEL org.opencontainers.image.vendor="Aurora Tuxedo"

# Verify tuxedo-drivers installation
RUN set -eux; \
    KVER=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1); \
    echo "Checking modules for kernel: ${KVER}"; \
    # List installed tuxedo files
    rpm -ql tuxedo-drivers || echo "tuxedo-drivers package contents not found"; \
    # Check if modules are in standard location
    find /lib/modules -name "tuxedo*.ko*" || echo "No tuxedo modules found"; \
    # Update module dependencies
    depmod -a ${KVER} || true

# Ensure modules auto-load on boot
RUN mkdir -p /etc/modules-load.d && echo 'tuxedo_keyboard' > /etc/modules-load.d/tuxedo.conf

# Copy overlay files
COPY overlay/ /

# Copy setup script
COPY scripts/setup-secureboot.sh /usr/bin/setup-secureboot
RUN chmod +x /usr/bin/setup-secureboot

# Resume hook to re-init keyboard on resume (fixes backlight reinit)
# File is already copied from overlay with correct permissions

# Cleanup
RUN rm -rf /var/cache/dnf/* /var/tmp/*

LABEL org.opencontainers.image.title="bluefin-tuxedo-dx-stable"
LABEL org.opencontainers.image.description="Bluefin DX Stable with Tuxedo drivers and TCC for InfinityBook laptops"
LABEL org.opencontainers.image.vendor="Bluefin Tuxedo"
