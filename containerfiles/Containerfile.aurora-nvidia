# syntax=docker/dockerfile:1.4
FROM ghcr.io/ublue-os/aurora-nvidia:stable
ENV LANG=C.UTF-8
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# Minimize DNF footprint and skip multilib pulls
RUN echo 'exclude=*.i686' >> /etc/dnf/dnf.conf &&     echo 'tsflags=nodocs' >> /etc/dnf/dnf.conf
# Add TUXEDO official repo and setup GPG key
RUN FEDORA_VER=$(rpm -E '%{fedora}') && \
    printf '[tuxedo]\nname=TUXEDO\nbaseurl=https://rpm.tuxedocomputers.com/fedora/%s/x86_64/base\nenabled=1\ngpgcheck=1\ngpgkey=https://rpm.tuxedocomputers.com/fedora/%s/0x54840598.pub.asc\n' \
    "${FEDORA_VER}" "${FEDORA_VER}" > /etc/yum.repos.d/tuxedo.repo && \
    curl -fsSL "https://rpm.tuxedocomputers.com/fedora/${FEDORA_VER}/0x54840598.pub.asc" -o /etc/pki/rpm-gpg/0x54840598.pub.asc && \
    rpm --import /etc/pki/rpm-gpg/0x54840598.pub.asc
# Install TUXEDO Control Center (tuxedo-drivers installed automatically as dependency)
# Install drivers normally so DKMS builds modules during the build
RUN dnf -y upgrade --setopt=install_weak_deps=False && \
    dnf -y install tuxedo-drivers && \
    dnf -y clean all
# Build DKMS modules for the installed kernel inside the image
RUN set -eux; \
    KVER=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1); \
    echo "Building DKMS modules for ${KVER}"; \
    dkms autoinstall -k "${KVER}" || true; \
    depmod -a "${KVER}" || true
# Install TCC - move to /usr/lib for ostree compatibility
RUN set -eux; \
    if [ -L /opt ]; then \
        rm /opt; \
        mkdir -p /opt; \
    elif [ ! -d /opt ]; then \
        mkdir -p /opt; \
    fi; \
    dnf -y install tuxedo-control-center && dnf -y clean all; \
    if [ ! -d /opt/tuxedo-control-center ]; then \
        echo "ERROR: TCC not installed to /opt/tuxedo-control-center"; \
        rpm -ql tuxedo-control-center || true; \
        exit 1; \
    fi; \
    mkdir -p /usr/lib/tuxedo-control-center; \
    cp -a /opt/tuxedo-control-center/. /usr/lib/tuxedo-control-center/; \
    rpm -q tuxedo-control-center --qf '%{VERSION}-%{RELEASE}\n' > /usr/lib/tuxedo-control-center/.build-version; \
    rm -rf /opt/tuxedo-control-center; \
    mkdir -p /var/opt; \
    ln -sfn /usr/lib/tuxedo-control-center /opt/tuxedo-control-center; \
    ln -sfn /usr/lib/tuxedo-control-center /var/opt/tuxedo-control-center; \
    if [ -f /usr/share/applications/tuxedo-control-center.desktop ]; then \
        sed -i 's|/usr/lib/tuxedo-control-center|/opt/tuxedo-control-center|g' /usr/share/applications/tuxedo-control-center.desktop; \
    fi; \
    for service_file in /etc/systemd/system/tccd*.service; do \
        if [ -f "$service_file" ]; then \
            sed -i 's|/usr/lib/tuxedo-control-center|/opt/tuxedo-control-center|g' "$service_file"; \
        fi; \
    done; \
    systemctl enable tccd.service 2>/dev/null || true; \
    systemctl enable tccd-sleep.service 2>/dev/null || true; \
    echo "âœ… TCC staged to /usr/lib/tuxedo-control-center with runtime symlinks to /opt"
# Create CLI wrapper for consistent launch behavior
RUN install -m 755 /dev/stdin /usr/bin/tuxedo-control-center <<'EOF'
#!/bin/bash
# Launch TCC - pass all arguments through
exec /opt/tuxedo-control-center/tuxedo-control-center "$@"
EOF
# Verify tuxedo-drivers installation
RUN set -eux; \
    KVER=$(rpm -q kernel --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' | tail -1); \
    echo "Checking modules for kernel: ${KVER}"; \
    # List installed tuxedo files
    rpm -ql tuxedo-drivers || echo "tuxedo-drivers package contents not found"; \
    # Check if modules are in standard location
    find /lib/modules -name "tuxedo*.ko*" || echo "No tuxedo modules found"; \
    # Update module dependencies
    depmod -a ${KVER} || true
# Ensure modules auto-load on boot
RUN mkdir -p /etc/modules-load.d && echo 'tuxedo_keyboard' > /etc/modules-load.d/tuxedo.conf
# Copy overlay files
COPY overlay/ /
# Copy setup script
COPY scripts/setup-secureboot.sh /usr/bin/setup-secureboot
RUN chmod +x /usr/bin/setup-secureboot
# Resume hook to re-init keyboard on resume (fixes backlight reinit)
# File is already copied from overlay with correct permissions
RUN rm -rf /var/cache/dnf/* /var/tmp/*

LABEL org.opencontainers.image.title="aurora-nvidia-tuxedo"
LABEL org.opencontainers.image.description="Aurora NVIDIA Stable with Tuxedo drivers and TCC for InfinityBook laptops"
LABEL org.opencontainers.image.vendor="Aurora Tuxedo"
